import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Embedding, Dot, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.regularizers import l2
from sklearn.metrics import precision_score, recall_score, f1_score

df_cleaned['listen_count'].fillna(df['listen_count'].mean(), inplace=True)

df_cleaned['user_id'] = df_cleaned['user_id'].astype("category").cat.codes
df_cleaned['song_id'] = df_cleaned['song_id'].astype("category").cat.codes


train_data, test_data = train_test_split(df_cleaned, test_size=0.2, random_state=42)


num_users = len(df_cleaned['user_id'].unique())
num_items = len(df_cleaned['song_id'].unique())
embedding_size = 50

user_input = Input(shape=(1,))
user_embedding = Embedding(num_users, embedding_size)(user_input)
user_embedding = Flatten()(user_embedding)

item_input = Input(shape=(1,))
item_embedding = Embedding(num_items, embedding_size)(item_input)
item_embedding = Flatten()(item_embedding)

concatenated = Dot(axes=1)([user_embedding, item_embedding])
concatenated = Dropout(0.5)(concatenated)
output = Dense(1, activation='relu', kernel_regularizer=l2(0.01))(concatenated)

model = Model(inputs=[user_input, item_input], outputs=output)


model.compile(optimizer=Adam(learning_rate=0.001), loss='mean_squared_error')
model.fit(x=[train_data['user_id'], train_data['song_id']], y=train_data['listen_count'], epochs=20, batch_size=64, verbose=0)


predictions = model.predict([test_data['user_id'], test_data['song_id']])
predictions = np.round(predictions)
predictions = predictions.astype(int)
actual_listens = test_data['listen_count'].astype(int)

precision = precision_score(actual_listens, predictions, average='micro')
recall = recall_score(actual_listens, predictions, average='micro')
f1 = f1_score(actual_listens, predictions, average='micro')

print("Pr√©cision:", precision)
print("Rappel:", recall)
print("Score F1:", f1)
